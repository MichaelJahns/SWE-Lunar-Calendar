
'use strict';

/**
 * @param {String} value (for property 'text')
 */
//var lastString;
var lastb;
//var stringIndex = 0;
export function update() {
 
//This section loads the current date
let year = new Date().getFullYear();
let month = new Date().getMonth();
let date = new Date();
let day = date.getDate();

//This section used for troubleshooting, comment out when not in use
//let year = 2020;
//let month = 10;
//let day = 31;
//day += 11; 

//this bit reduced my rounding errors.
if (month < 3) {
      year--;
      month += 12;
    }
++month;

//Converts date into a single numeric value
  let c = year * 365.25;
  let e = 30.6 * month;
  let jd = (c + e + day - 694039.09);	// jd is total days elapsed since beginning of julian calendar

//Calculates days until full moon
  let b = parseInt(jd / 29.5305882);	// int(jd) -> b, take integer part of jd
  jd -= (b*29.5305882)                // Subtract b * lunar cycle from jd. Result will be between 0.1 and 29.5
  //The new jd value is how far we are in the current lunar cycle.  Full moons fall on 14, 
  if(jd>14){
	  b = (29.5305882 - jd + 14); // if we passed a full moon, then we need to rollover to 0 before adding 14
  }
  if(jd<=14){
	  b = (14 - jd); // if we have not passed a full moon, we simply need to subtract from 14.
  }
  // worth noting that the 14 number SHOULD be 14.265... but for some reason 14 gives me fewer rounding errors

//Rounding errors are inevitable. Especially with time zones. This section pads for
//full moon detection, because false positives are more fun than false negatives.  
if(b < 1.5){
  thisLayer.text = "Full"; //Display Full if b is between 0.0 and 1.5
}
if(b > 28){
  thisLayer.text = "Full"; //Display Full if b is between 28 and 29.5
}
if(b >= 1.5 && b <= 28){   //Otherwise display b
  thisLayer.text = parseInt(b);
}

//Updates string
if (lastb != b) {
	lastb = b;
  }
}
